@import url('https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;900&display=swap');

body {
    font-family: 'Tajawal', sans-serif;
    margin: 0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    background-color: #0f172a;
}

.background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
}

.stars {
    position: absolute;
    width: 100%;
    height: 100%;
}

.star {
    position: absolute;
    background-color: white;
    border-radius: 50%;
    animation: twinkle var(--duration) infinite ease-in-out;
    opacity: 0;
}

@keyframes twinkle {
    0% { opacity: 0; }
    50% { opacity: var(--opacity); }
    100% { opacity: 0; }
}

.gradient-bg {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
}

.calculator {
    background-color: rgba(15, 23, 42, 0.85);
    border-radius: 1.5rem;
    box-shadow: 0 0 50px rgba(99, 102, 241, 0.5);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(99, 102, 241, 0.3);
    overflow: hidden;
    transition: all 0.3s ease;
    max-width: 95%;
    width: 360px;
}

.calculator:hover {
    box-shadow: 0 0 70px rgba(99, 102, 241, 0.7);
}

.calculator-button {
    transition: all 0.2s;
    position: relative;
    overflow: hidden;
}

.calculator-button:active {
    transform: scale(0.95);
}

.calculator-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
}

.calculator-button:focus::after {
    animation: ripple 1s ease-out;
}

@keyframes ripple {
    0% {
        transform: scale(0, 0);
        opacity: 0.5;
    }
    100% {
        transform: scale(20, 20);
        opacity: 0;
    }
}

.score-animation {
    animation: scorePopup 0.5s ease-out;
}

@keyframes scorePopup {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

.timer-bar {
    transition: width 0.1s linear;
    box-shadow: 0 0 10px rgba(99, 102, 241, 0.7);
}

.correct-answer {
    animation: correctFlash 0.8s;
}

@keyframes correctFlash {
    0% { background-color: rgba(15, 23, 42, 0.85); }
    30% { background-color: rgba(16, 185, 129, 0.7); }
    100% { background-color: rgba(15, 23, 42, 0.85); }
}

.wrong-answer {
    animation: wrongFlash 0.8s;
}

@keyframes wrongFlash {
    0% { background-color: rgba(15, 23, 42, 0.85); }
    30% { background-color: rgba(239, 68, 68, 0.7); }
    100% { background-color: rgba(15, 23, 42, 0.85); }
}

.leaderboard-item {
    animation: fadeIn 0.5s;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.difficulty-btn.active {
    border: 2px solid #ffffff;
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
}

.badge {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    margin: 0 5px;
    opacity: 0.4;
    transition: all 0.3s ease;
}

.badge.earned {
    opacity: 1;
    animation: badgeEarned 1s;
}

@keyframes badgeEarned {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
}

.challenge {
    animation: challengeAppear 0.5s;
}

@keyframes challengeAppear {
    0% { transform: translateY(-20px); opacity: 0; }
    100% { transform: translateY(0); opacity: 1; }
}

.golden-time {
    animation: goldenPulse 2s infinite;
}

@keyframes goldenPulse {
    0% { box-shadow: 0 0 5px rgba(250, 204, 21, 0.7); }
    50% { box-shadow: 0 0 20px rgba(250, 204, 21, 0.9); }
    100% { box-shadow: 0 0 5px rgba(250, 204, 21, 0.7); }
}

.modal {
    animation: modalAppear 0.3s;
}

@keyframes modalAppear {
    0% { transform: scale(0.9); opacity: 0; }
    100% { transform: scale(1); opacity: 1; }
}

.confetti {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #f00;
    opacity: 0;
}

.streak-counter {
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-weight: bold;
    opacity: 0;
    transition: all 0.3s;
}

.streak-counter.show {
    animation: streakShow 1s;
}

@keyframes streakShow {
    0% { opacity: 0; top: 0; }
    20% { opacity: 1; top: -30px; }
    80% { opacity: 1; top: -30px; }
    100% { opacity: 0; top: -50px; }
}

.bonus-points {
    position: absolute;
    color: #fcd34d;
    font-weight: bold;
    opacity: 0;
    font-size: 1.2rem;
    z-index: 10;
}

.bonus-points.show {
    animation: bonusShow 1.5s;
}

@keyframes bonusShow {
    0% { opacity: 0; transform: translate(-50%, 0); }
    20% { opacity: 1; transform: translate(-50%, -20px); }
    80% { opacity: 1; transform: translate(-50%, -20px); }
    100% { opacity: 0; transform: translate(-50%, -40px); }
}

.progress-ring {
    transition: stroke-dashoffset 0.3s;
    transform: rotate(-90deg);
    transform-origin: 50% 50%;
}

الملف الثالث: script.js

// Game variables
let gameActive = false;
let currentProblem = {};
let score = 0;
let correctCount = 0;
let wrongCount = 0;
let level = 1;
let timeLeft = 100;
let timerInterval;
let maxTime = 10; // seconds
let difficulty = 'medium'; // default difficulty
let currentStreak = 0;
let bestStreak = 0;
let lastAnswerTime = 0;
let challengeActive = false;
let challengeProgress = 0;
let challengeGoal = 0;
let challengeType = '';
let goldenTimeActive = false;
let goldenTimeTimeout;
let badges = {
    streak: false,
    level: false,
    correct: false,
    score: false,
    challenge: false
};

// DOM elements
const displayElement = document.getElementById('display');
const problemElement = document.getElementById('problem');
const scoreElement = document.getElementById('score');
const timerBarElement = document.getElementById('timer-bar');
const correctCountElement = document.getElementById('correct-count');
const wrongCountElement = document.getElementById('wrong-count');
const levelElement = document.getElementById('level');
const currentStreakElement = document.getElementById('current-streak');
const startButton = document.getElementById('start-button');
const instructionsModal = document.getElementById('instructions-modal');
const gameOverModal = document.getElementById('game-over-modal');
const leaderboardModal = document.getElementById('leaderboard-modal');
const difficultyDisplay = document.getElementById('difficulty-display');
const levelProgressElement = document.getElementById('level-progress');
const challengeBanner = document.getElementById('challenge-banner');
const goldenTimeBanner = document.getElementById('golden-time-banner');
const streakCounter = document.getElementById('streak-counter');
const bonusPoints = document.getElementById('bonus-points');

// Create stars for background
function createStars() {
    const stars = document.getElementById('stars');
    const count = 200;
    
    for (let i = 0; i < count; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        
        // Random position
        const x = Math.random() * 100;
        const y = Math.random() * 100;
        
        // Random size
        const size = Math.random() * 3;
        
        // Random duration and delay
        const duration = 2 + Math.random() * 8;
        const delay = Math.random() * 10;
        
        // Random opacity
        const opacity = 0.5 + Math.random() * 0.5;
        
        star.style.left = `${x}%`;
        star.style.top = `${y}%`;
        star.style.width = `${size}px`;
        star.style.height = `${size}px`;
        star.style.setProperty('--duration', `${duration}s`);
        star.style.setProperty('--opacity', opacity);
        star.style.animationDelay = `${delay}s`;
        
        stars.appendChild(star);
    }
}

// Initialize display
function initDisplay() {
    displayElement.textContent = '0';
}

// Append to display
function appendToDisplay(value) {
    if (!gameActive) return;
    
    if (displayElement.textContent === '0' && value !== '.') {
        displayElement.textContent = value;
    } else {
        displayElement.textContent += value;
    }
}

// Clear display
function clearDisplay() {
    displayElement.textContent = '0';
}

// Backspace
function backspace() {
    if (displayElement.textContent.length === 1) {
        displayElement.textContent = '0';
    } else {
        displayElement.textContent = displayElement.textContent.slice(0, -1);
    }
}

// Generate a math problem based on level and difficulty
function generateProblem() {
    let num1, num2, operator, answer, problem;
    
    // Adjust difficulty based on level and selected difficulty
    let maxNum, operators;
    
    if (difficulty === 'easy') {
        maxNum = Math.min(10 + (level * 2), 50);
        operators = level <= 2 ? ['+'] : ['+', '-'];
    } else if (difficulty === 'medium') {
        maxNum = Math.min(10 + (level * 5), 100);
        operators = level === 1 ? ['+', '-'] : 
                   level <= 3 ? ['+', '-', '*'] : 
                   ['+', '-', '*', '/'];
    } else { // hard
        maxNum = Math.min(20 + (level * 10), 200);
        operators = level === 1 ? ['+', '-', '*'] : ['+', '-', '*', '/'];
    }
    
    operator = operators[Math.floor(Math.random() * operators.length)];
    
    if (operator === '+') {
        num1 = Math.floor(Math.random() * maxNum) + 1;
        num2 = Math.floor(Math.random() * maxNum) + 1;
        answer = num1 + num2;
        problem = `${num1} + ${num2} = ?`;
    } else if (operator === '-') {
        num1 = Math.floor(Math.random() * maxNum) + 1;
        num2 = Math.floor(Math.random() * num1) + 1; // Ensure positive result
        answer = num1 - num2;
        problem = `${num1} - ${num2} = ?`;
    } else if (operator === '*') {
        const maxFactor = difficulty === 'hard' ? 20 : 12;
        num1 = Math.floor(Math.random() * Math.min(maxFactor, maxNum/2)) + 1;
        num2 = Math.floor(Math.random() * Math.min(maxFactor, maxNum/2)) + 1;
        answer = num1 * num2;
        problem = `${num1} × ${num2} = ?`;
    } else if (operator === '/') {
        const maxDivisor = difficulty === 'hard' ? 20 : 10;
        num2 = Math.floor(Math.random() * maxDivisor) + 1;
        answer = Math.floor(Math.random() * maxDivisor) + 1;
        num1 = num2 * answer; // Ensure clean division
        problem = `${num1} ÷ ${num2} = ?`;
    }
    
    return { problem, answer };
}

// Set new problem
function setNewProblem() {
    currentProblem = generateProblem();
    problemElement.textContent = currentProblem.problem;
    clearDisplay();
    resetTimer();
    lastAnswerTime = Date.now();
}

// Check answer
function checkAnswer() {
    if (!gameActive) return;
    
    const userAnswer = parseFloat(displayElement.textContent);
    const answerTime = (Date.now() - lastAnswerTime) / 1000; // Time in seconds
    
    if (userAnswer === currentProblem.answer) {
        // Correct answer
        displayElement.parentElement.classList.add('correct-answer');
        setTimeout(() => {
            displayElement.parentElement.classList.remove('correct-answer');
        }, 800);
        
        // Update streak
        currentStreak++;
        currentStreakElement.textContent = currentStreak;
        
        if (currentStreak > bestStreak) {
            bestStreak = currentStreak;
        }
        
        // Show streak counter for streaks >= 3
        if (currentStreak >= 3) {
            streakCounter.textContent = `${currentStreak}x 🔥`;
            streakCounter.classList.add('show');
            setTimeout(() => {
                streakCounter.classList.remove('show');
            }, 1000);
        }
        
        // Check for streak badge
        if (currentStreak >= 5 && !badges.streak) {
            badges.streak = true;
            document.getElementById('badge-streak').classList.add('earned');
            showAchievement('🔥 سلسلة ناجحة!', 'أجبت على 5 أسئلة متتالية بشكل صحيح');
        }
        
        // Calculate points based on time left, difficulty, and streak
        const timeBonus = Math.ceil(timeLeft / 10);
        let difficultyMultiplier = 1;
        if (difficulty === 'medium') difficultyMultiplier = 1.5;
        if (difficulty === 'hard') difficultyMultiplier = 2;
        
        let streakMultiplier = 1;
        if (currentStreak >= 10) streakMultiplier = 2;
        else if (currentStreak >= 5) streakMultiplier = 1.5;
        
        // Golden time bonus
        let goldenTimeMultiplier = goldenTimeActive ? 2 : 1;
        
        // Fast answer bonus (under 3 seconds)
        let speedBonus = 0;
        if (answerTime < 3) {
            speedBonus = Math.floor((3 - answerTime) * 5);
        }
        
        const basePoints = 10 + timeBonus + (level * 5) + speedBonus;
        const pointsEarned = Math.floor(basePoints * difficultyMultiplier * streakMultiplier * goldenTimeMultiplier);
        
        // Show bonus points animation
        if (pointsEarned > basePoints) {
            bonusPoints.textContent = `+${pointsEarned}`;
            bonusPoints.style.left = '50%';
            bonusPoints.style.top = '50%';
            bonusPoints.classList.add('show');
            setTimeout(() => {
                bonusPoints.classList.remove('show');
            }, 1500);
        }
        
        // Update score
        score += pointsEarned;
        scoreElement.textContent = score;
        scoreElement.classList.add('score-animation');
        setTimeout(() => {
            scoreElement.classList.remove('score-animation');
        }, 500);
        
        // Check for score badge
        if (score >= 100 && !badges.score) {
            badges.score = true;
            document.getElementById('badge-score').classList.add('earned');
            showAchievement('⭐ 100 نقطة!', 'وصلت إلى 100 نقطة، أداء رائع!');
        }
        
        correctCount++;
        correctCountElement.textContent = correctCount;
        
        // Check for correct answers badge
        if (correctCount >= 50 && !badges.correct) {
            badges.correct = true;
            document.getElementById('badge-correct').classList.add('earned');
            showAchievement('✓ إجابات صحيحة!', 'أجبت على 50 سؤال بشكل صحيح');
        }
        
        // Update level progress
        const progressToNextLevel = (correctCount % 5) / 5 * 100;
        levelProgressElement.style.width = `${progressToNextLevel}%`;
        
        // Level up every 5 correct answers
        if (correctCount % 5 === 0) {
            level++;
            levelElement.textContent = level;
            
            // Check for level badge
            if (level >= 5 && !badges.level) {
                badges.level = true;
                document.getElementById('badge-level').classList.add('earned');
                showAchievement('🏆 المستوى 5!', 'وصلت إلى المستوى 5، تقدم رائع!');
            }
            
            // Adjust max time based on difficulty and level
            if (difficulty === 'easy') {
                maxTime = Math.max(7, 12 - Math.floor(level/3));
            } else if (difficulty === 'medium') {
                maxTime = Math.max(5, 10 - Math.floor(level/2));
            } else { // hard
                maxTime = Math.max(3, 8 - Math.floor(level/2));
            }
            
            // Level up animation
            levelElement.classList.add('score-animation');
            setTimeout(() => {
                levelElement.classList.remove('score-animation');
            }, 500);
        }
        
        // Update challenge progress if active
        if (challengeActive) {
            if (challengeType === 'speed' && answerTime < 5) {
                challengeProgress++;
            } else if (challengeType === 'streak') {
                challengeProgress++;
            }
            
            // Check if challenge completed
            if (challengeProgress >= challengeGoal) {
                completeChallengeSuccess();
            }
            
            // Update challenge banner
            updateChallengeBanner();
        }
        
        // Random chance to activate golden time (5%)
        if (!goldenTimeActive && Math.random() < 0.05) {
            activateGoldenTime();
        }
        
        // Random chance to start a challenge (10% if no challenge active)
        if (!challengeActive && Math.random() < 0.1) {
            startRandomChallenge();
        }
        
        // Set new problem
        setNewProblem();
    } else {
        // Wrong answer
        displayElement.parentElement.classList.add('wrong-answer');
        setTimeout(() => {
            displayElement.parentElement.classList.remove('wrong-answer');
        }, 800);
        
        // Reset streak
        currentStreak = 0;
        currentStreakElement.textContent = currentStreak;
        
        wrongCount++;
        wrongCountElement.textContent = wrongCount;
        
        // Penalty: reduce time
        timeLeft = Math.max(10, timeLeft - 20);
        
        // If challenge is active, fail it
        if (challengeActive) {
            failChallenge();
        }
        
        // Check if game over (3 wrong answers)
        if (wrongCount >= 3) {
            endGame();
        }
    }
}

// Timer functions
function startTimer() {
    clearInterval(timerInterval);
    timerInterval = setInterval(() => {
        timeLeft -= 1;
        timerBarElement.style.width = `${timeLeft}%`;
        
        if (timeLeft <= 0) {
            // Time's up for this problem
            wrongCount++;
            wrongCountElement.textContent = wrongCount;
            
            // Reset streak
            currentStreak = 0;
            currentStreakElement.textContent = currentStreak;
            
            // If challenge is active, fail it
            if (challengeActive) {
                failChallenge();
            }
            
            // Check if game over (3 wrong answers)
            if (wrongCount >= 3) {
                endGame();
            } else {
                setNewProblem();
            }
        }
    }, maxTime * 10); // Update every 100ms
}

function resetTimer() {
    timeLeft = 100;
    timerBarElement.style.width = '100%';
}

// Challenge functions
function startRandomChallenge() {
    // Choose a random challenge type
    const challengeTypes = ['speed', 'streak'];
    challengeType = challengeTypes[Math.floor(Math.random() * challengeTypes.length)];
    
    if (challengeType === 'speed') {
        challengeGoal = 3;
        challengeBanner.textContent = `تحدي السرعة: أجب على ${challengeGoal} أسئلة في أقل من 5 ثوان لكل سؤال!`;
    } else if (challengeType === 'streak') {
        challengeGoal = 5;
        challengeBanner.textContent = `تحدي السلسلة: أجب على ${challengeGoal} أسئلة متتالية بشكل صحيح!`;
    }
    
    challengeProgress = 0;
    challengeActive = true;
    challengeBanner.classList.remove('hidden');
}

function updateChallengeBanner() {
    if (challengeType === 'speed') {
        challengeBanner.textContent = `تحدي السرعة: ${challengeProgress}/${challengeGoal} (أقل من 5 ثوان لكل سؤال)`;
    } else if (challengeType === 'streak') {
        challengeBanner.textContent = `تحدي السلسلة: ${challengeProgress}/${challengeGoal} إجابات متتالية صحيحة`;
    }
}

function completeChallengeSuccess() {
    // Award bonus points
    const challengeBonus = 50;
    score += challengeBonus;
    scoreElement.textContent = score;
    
    // Show achievement
    showAchievement('🎯 تحدي مكتمل!', `أكملت التحدي وربحت ${challengeBonus} نقطة إضافية!`);
    
    // Award badge if first challenge completed
    if (!badges.challenge) {
        badges.challenge = true;
        document.getElementById('badge-challenge').classList.add('earned');
    }
    
    // Reset challenge
    challengeActive = false;
    challengeBanner.classList.add('hidden');
}

function failChallenge() {
    // Reset challenge
    challengeActive = false;
    challengeBanner.classList.add('hidden');
}

// Golden time functions
function activateGoldenTime() {
    goldenTimeActive = true;
    goldenTimeBanner.classList.remove('hidden');
    
    // Show achievement
    showAchievement('⏱️ الوقت الذهبي!', 'نقاط مضاعفة لفترة محدودة!');
    
    // Set timeout to end golden time
    goldenTimeTimeout = setTimeout(() => {
        goldenTimeActive = false;
        goldenTimeBanner.classList.add('hidden');
    }, 15000); // 15 seconds of golden time
}

// Achievement notification
function showAchievement(title, description) {
    const notification = document.getElementById('achievement-notification');
    const titleElement = document.getElementById('achievement-title');
    const descriptionElement = document.getElementById('achievement-description');
    const iconElement = document.getElementById('achievement-icon');
    
    // Set content
    titleElement.textContent = title;
    descriptionElement.textContent = description;
    
    // Set icon based on title
    if (title.includes('🔥')) iconElement.textContent = '🔥';
    else if (title.includes('🏆')) iconElement.textContent = '🏆';
    else if (title.includes('✓')) iconElement.textContent = '✓';
    else if (title.includes('⭐')) iconElement.textContent = '⭐';
    else if (title.includes('🎯')) iconElement.textContent = '🎯';
    else if (title.includes('⏱️')) iconElement.textContent = '⏱️';
    
    // Show notification
    notification.classList.remove('hidden');
    
    // Hide after 3 seconds
    setTimeout(() => {
        notification.classList.add('hidden');
    }, 3000);
}

// Game control functions
function startGame() {
    // Reset game state
    score = 0;
    correctCount = 0;
    wrongCount = 0;
    level = 1;
    currentStreak = 0;
    bestStreak = 0;
    
    // Reset badges for new game
    badges = {
        streak: false,
        level: false,
        correct: false,
        score: false,
        challenge: false
    };
    
    // Reset badge UI
    document.querySelectorAll('.badge').forEach(badge => {
        badge.classList.remove('earned');
    });
    
    // Reset challenge and golden time
    challengeActive = false;
    challengeBanner.classList.add('hidden');
    goldenTimeActive = false;
    goldenTimeBanner.classList.add('hidden');
    clearTimeout(goldenTimeTimeout);
    
    // Set initial max time based on difficulty
    if (difficulty === 'easy') {
        maxTime = 12;
    } else if (difficulty === 'medium') {
        maxTime = 10;
    } else { // hard
        maxTime = 8;
    }
    
    // Update UI
    scoreElement.textContent = score;
    correctCountElement.textContent = correctCount;
    wrongCountElement.textContent = wrongCount;
    levelElement.textContent = level;
    currentStreakElement.textContent = currentStreak;
    startButton.textContent = 'إعادة اللعبة';
    levelProgressElement.style.width = '0%';
    
    // Start game
    gameActive = true;
    setNewProblem();
    startTimer();
}

function endGame() {
    gameActive = false;
    clearInterval(timerInterval);
    
    // Clear any active challenges or golden time
    challengeActive = false;
    goldenTimeActive = false;
    clearTimeout(goldenTimeTimeout);
    
    // Update final stats
    document.getElementById('final-score').textContent = score;
    document.getElementById('final-correct').textContent = correctCount;
    document.getElementById('final-wrong').textContent = wrongCount;
    document.getElementById('final-level').textContent = level;
    document.getElementById('final-streak').textContent = bestStreak;
    
    // Show earned badges
    const badgesContainer = document.getElementById('earned-badges-container');
    badgesContainer.innerHTML = '';
    
    if (badges.streak) {
        const badge = document.createElement('div');
        badge.className = 'badge bg-green-600 earned';
        badge.textContent = '🔥';
        badge.title = '5 إجابات متتالية';
        badgesContainer.appendChild(badge);
    }
    
    if (badges.level) {
        const badge = document.createElement('div');
        badge.className = 'badge bg-blue-600 earned';
        badge.textContent = '🏆';
        badge.title = 'المستوى 5';
        badgesContainer.appendChild(badge);
    }
    
    if (badges.correct) {
        const badge = document.createElement('div');
        badge.className = 'badge bg-purple-600 earned';
        badge.textContent = '✓';
        badge.title = '50 إجابة صحيحة';
        badgesContainer.appendChild(badge);
    }
    
    if (badges.score) {
        const badge = document.createElement('div');
        badge.className = 'badge bg-yellow-500 earned';
        badge.textContent = '⭐';
        badge.title = '100 نقطة';
        badgesContainer.appendChild(badge);
    }
    
    if (badges.challenge) {
        const badge = document.createElement('div');
        badge.className = 'badge bg-red-600 earned';
        badge.textContent = '🎯';
        badge.title = 'إكمال تحدي';
        badgesContainer.appendChild(badge);
    }
    
    // Show game over modal
    gameOverModal.classList.remove('hidden');
}

function restartGame() {
    gameOverModal.classList.add('hidden');
    startGame();
}

// Difficulty functions
function setDifficulty(newDifficulty) {
    difficulty = newDifficulty;
    
    // Update UI
    difficultyDisplay.textContent = 
        difficulty === 'easy' ? 'سهل' : 
        difficulty === 'medium' ? 'متوسط' : 'صعب';
    
    // Update active button
    const buttons = document.querySelectorAll('.difficulty-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    const activeButton = Array.from(buttons).find(btn => {
        return btn.onclick.toString().includes(newDifficulty);
    });
    
    if (activeButton) {
        activeButton.classList.add('active');
    }
}

// Leaderboard functions
function saveScore() {
    const playerName = document.getElementById('player-name').value.trim() || 'لاعب مجهول';
    
    // Get existing leaderboard from localStorage
    let leaderboard = JSON.parse(localStorage.getItem('calculatorGameLeaderboard') || '{}');
    
    // Initialize difficulty category if it doesn't exist
    if (!leaderboard[difficulty]) {
        leaderboard[difficulty] = [];
    }
    
    // Add new score
    leaderboard[difficulty].push({
        name: playerName,
        score: score,
        level: level,
        correct: correctCount,
        streak: bestStreak,
        badges: Object.values(badges).filter(v => v).length,
        date: new Date().toISOString()
    });
    
    // Sort by score (descending)
    leaderboard[difficulty].sort((a, b) => b.score - a.score);
    
    // Keep only top 10
    if (leaderboard[difficulty].length > 10) {
        leaderboard[difficulty] = leaderboard[difficulty].slice(0, 10);
    }
    
    // Save back to localStorage
    localStorage.setItem('calculatorGameLeaderboard', JSON.stringify(leaderboard));
    
    // Close game over modal and show leaderboard
    gameOverModal.classList.add('hidden');
    showLeaderboard();
}

function showLeaderboard() {
    // Get leaderboard data
    const leaderboard = JSON.parse(localStorage.getItem('calculatorGameLeaderboard') || '{}');
    
    // Show current difficulty tab
    showLeaderboardTab(difficulty);
    
    // Show modal
    leaderboardModal.classList.remove('hidden');
}

function showLeaderboardTab(difficultyTab) {
    // Update active tab
    const tabs = document.querySelectorAll('.difficulty-tab');
    tabs.forEach(tab => tab.classList.remove('active'));
    document.getElementById(`${difficultyTab}-tab`).classList.add('active');
    
    // Get leaderboard data
    const leaderboard = JSON.parse(localStorage.getItem('calculatorGameLeaderboard') || '{}');
    const scores = leaderboard[difficultyTab] || [];
    
    // Update leaderboard list
    const leaderboardList = document.getElementById('leaderboard-list');
    leaderboardList.innerHTML = '';
    
    if (scores.length === 0) {
        leaderboardList.innerHTML = '<div class="p-4 text-center text-slate-400">لا توجد نتائج بعد</div>';
    } else {
        scores.forEach((entry, index) => {
            const item = document.createElement('div');
            item.className = 'flex justify-between p-2 border-b border-slate-600 leaderboard-item';
            
            // Add medal for top 3
            let rankDisplay = `${index + 1}`;
            if (index === 0) rankDisplay = '🥇 1';
            else if (index === 1) rankDisplay = '🥈 2';
            else if (index === 2) rankDisplay = '🥉 3';
            
            // Add badges if available
            let badgesDisplay = '';
            if (entry.badges > 0) {
                badgesDisplay = ` ${entry.badges}🏅`;
            }
            
            item.innerHTML = `
                <span>${rankDisplay}</span>
                <span>${entry.name}${badgesDisplay}</span>
                <span>${entry.score}</span>
            `;
            leaderboardList.appendChild(item);
        });
    }
}

function closeLeaderboard() {
    leaderboardModal.classList.add('hidden');
}

// Instructions functions
function showInstructions() {
    instructionsModal.classList.remove('hidden');
}

function closeInstructions() {
    instructionsModal.classList.add('hidden');
}

// Initialize
function initialize() {
    initDisplay();
    createStars();
    
    // Show instructions on first load
    setTimeout(() => {
        showInstructions();
    }, 500);
}
